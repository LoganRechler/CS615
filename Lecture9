Pre-Class Notes:
-----------------------------------
Writing Consistent Tools:
	support the same command line arguments across tools
		-V for version
		-h for usage/help
		-v for verbosity
	password handling
		passing the password from env:var is visible
		same with pass:password (passing it directly)
		passing it from a file is more secure (file:pathname)
		using something like keychain:service (like security(1) on Macs) is better
	input processing
		process input as it comes in one line at a time, don't wait for the entire thing
	temporary files
		use mktemp(3)
		remove the temporary files/directories on exit
Signs of Triviality:
	3 phases of software development
		scripting
			proof of concept
			typically written in shell
			used for simple tasks
		programming
			provides a consistent interface
			accounts for changes in environment
			can handle more complex tasks
		software engineering
			usually has a dedicated team
			has measurable goals, specifications, etc
	technical features
		have a set number of outcomes for the tool
		if something can fail, it needs to be checked
		fail explicitly
	documentation
		write a man page for any tool you make
-----------------------------------------------
Post Class Notes
-----------------------------------------------
Tools allow you to do the same thing over and over again more reliably
documentation allows you (and others) to understand the tools
aliases go in ~/bashrc
if you write it for yourself you know all about your environment
if you write it for your peers you get less assumptions (might require them to change some stuff i.e; username)
as you open it up, your assumptions become fewer
also requires more documentationwrite the man page first
automation can make accountability harder
/bin/sh
	lowest common denominator
	shell is a programming language

check out oh-my-zsh/oh-my-bash
write tools that do one things
write tools that work together
write programs to handle text streams because that is a universal interface
boring and legible code is good code
standard width terminal=80chars
	refactor if code is wrapping too much
comments should describe why the code is doing something (if it is not obvious)
whitelist don't blacklist
bug report:
	describe the problem
	steps to reproduce
	expected results
	actual results
	
	Optional:
		screenshots/copy of terminal
		suggested remediation
		code patch


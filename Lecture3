Before Class
-----------------------------------------------
Software Installation and Package Management:
	HTTP server connections are handled on ports 80 and 443
	
	Boot Process:
		POST (power-on self test)
		primary boot loader executes
		mbr is accessed
		secondary boot loader executes
		hypervisor loads, privileged domain starts
		virtual hardware is initialized by the domU for the guest OS
		guest OS kernel loads

	Second stage boot loaders:
		init(8)
			a process created explicitly by the kernel, spawns all other processes

	software running in kernel space has full access to aspects of the hardware/OS
	software running in user space has to rely on system calls
	
	Firmware:
		software that lies between the kernel and the system software
		exists between the hardware and software
			RAID controllers/BIOS

	System software exists in the operating system above the kernel but can still access the Frimware
	Third-party applications are not in the OS and can only access system software/apps/utilities

	Unix file system "/" used to be a partition for the OS to boot

	unshareable files are data files that need to be individual to each host

	static files do not change during runtime of the system (kernel/sys libs/binaries)

	OS Installation:
		hardware identification, privisioning, and registration
		base OS installation
		add-on applications installation
		initial minimum system configuration
		system registration
		system restart

	Package managers:
		make package installation easy
		automatically resolves software dependencies
		keeps an inventory of which packages are installed
		tracks which files belong to which package
		tracks checksums for the files
		provides security (downloading source code from third parties)

	Managing software updates/patches:
		be aware of softare updates
			what new features they might include/what else has changed
		track security updates/announcements
			important to update when a vulnerability has been discovered and patched
		consider privesc possibilities
			small vulnerabilities can be dangerous if left open
		consider shared vs static binaries
			shared will have an immediate change
			static will require the applications to be re-linked
		restart applications after the software update
			ensures that the update actually takes effect
		verify update integrity
			check the hash/sign
		create your own patch
			remove/restrict certain functionality (log4j)

----------------------------------------------------------------
After Class
----------------------------------------------------------------
GRUB (grand unified boot loader)
	replaced LILO (linux loader)
Boot loader
	starts the OS

POST
	basic functionality
	checks if the hardware exists/isn't faulty
	battery status

internal battery
	keeps the BIOS up and running

BIOS (basic I/O system)
	runs on a chip on the motherboard
	keeps certain information in RAM
	enable/disable hardware
	specifies boot order
	password protected
		can be reset to avoid the password
			pop out the battery to reset the BIOS
If you have physical access to the system you own it (can do whatever you want with it)

BIOS partition:
	divides the disk
	description of the partition is at the first block of the disk
		512 bytes
	4 partitions
MBR (master boot record)
	first 512 bytes of storage
	last 2 bytes /0x55/0xAA
	64 bytes allocated for partition table
	446 bytes left for the boot loader/OS
		all it has to do is provide enough space for the first stage boot loader to start the operating system
First Stage Boot Loader
	not OS specific

TPM (trusted platform module)
	it is difficult to keep them secure
	anybody with physical access can control
	requires you to trust whoever shipped it to you

File System:
	d->disk
	c->OS
		can be partitioned into different sections
	
	file types:
		fifo
			size of 0, uses file API
		socket
			size of 0, uses socket API
		character device
			any kind of input device
		block device
			mounted device (all possible disks, represents the hardware)
		directory
			directories used to be considered files
			stores information about file names to link using the inodes
		standard file
			no difference between a file and a link
				just an entry in a directory
				doesn't know which linked file you looked at
		symbolic link
			says instead of looking at me, look at the other end of the link
			can be done across disks (file systems)
			can create symbolic links to a directory (can't create hard links to them)
	File Name:
		can be any sequence of bytes except for 2
			/
			null bytes

	directories like /usr exist because there used to be a lack of space
		/ would contain the minimum required to boot the OS

